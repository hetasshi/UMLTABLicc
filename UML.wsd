@startuml
class Библиотека {
    - книги: List<Книга>
    - читатели: List<Читатель>
    - сотрудники: List<Сотрудник>
    + добавить_книгу(книга: Книга)
    + удалить_книгу(книга: Книга)
    + зарегистрировать_читателя(читатель: Читатель)
    + выдать_книгу(книга: Книга, читатель: Читатель)
    + принять_возврат(книга: Книга, читатель: Читатель)
}
class Книга {
    - id: int
    - название: String
    - авторы: List<Автор>
    - жанр: Жанр
    - год_издания: int
    - статус: СтатусКниги
    + взять_книгу(читатель: Читатель)
    + вернуть_книгу()
}

class Автор {
    - имя: String
}

class Жанр {
    - название: String
    - родительский_жанр: Жанр
}

class Персона {
    - имя: String
    - контакты: String
}

class Читатель {
    - номер_билета: int
    - взятые_книги: List<Книга>
    - зарезервированные_книги: List<Книга>
    + взять_книгу(книга: Книга)
    + вернуть_книгу(книга: Книга)
    + зарезервировать_книгу(книга: Книга)
}

class Сотрудник {
    - id: int
}

class Библиотекарь {
    + оформить_выдачу(книга: Книга, читатель: Читатель)
    + оформить_возврат(книга: Книга)
}

class Администратор {
    + добавить_сотрудника(сотрудник: Сотрудник)
    + управлять_книгами()
    + управлять_читателями()
}

class Уведомление {
    - сообщение: String
    - получатель: Читатель
    + отправить()
}

class Операция {
    - книга: Книга
    - читатель: Читатель
    - срок_возврата: Date
    - штраф: Double
    + рассчитать_штраф()
}

Библиотека *-- Книга
Библиотека *-- Читатель
Библиотека *-- Сотрудник
Книга o-- Автор
Книга *-- Жанр
Читатель --|> Персона
Сотрудник --|> Персона
Библиотекарь --|> Сотрудник
Администратор --|> Сотрудник
Читатель *-- Книга : взятыеКниги
Читатель *-- Книга : зарезервированныеКниги
Уведомление *-- Читатель
Операция *-- Книга
Операция *-- Читатель
@enduml
